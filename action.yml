name: "Build and deploy via GitOps repo"
description: "Will build and deploy the given docker application to the given container registry and update the deployment file in the given GitOps repository"
inputs:
  docker-working-directory:
    description: 'The path to the working directory'
    required: false
    default: '.'
  docker-file-relative:
    description: 'The path to the Dockerfile relative to the docker-working-directory'
    required: true
  deployment-file:
    description: 'The full path the the deployment file from the repo root'
    required: true
  app-name:
    description: 'The name of the app'
    required: true
  environment:
    description: 'The name of the environment. Typicaly either "staging" or "production"'
    required: true
  kubernetes-namespace:
    description: 'The namespace to deploy to inside the Kubernetes cluster'
    required: false
    default: default
  acr-registry:
    description: 'The name of the ACR registry to upload the image to'
    required: true
  azure-service-principal-id:
    description: 'The ID of the service principal to use when pushing the image and deploying the app'
    required: true
  azure-service-principal-password:
    description: 'The password of the service principal to use when pushing the image and deploying the app'
    required: true
  gitops-repo-url:
    description: 'The URL to the GitOps repo to update'
    required: true
  github-app-id:
    description: 'The ID of the Github app to use for updating the GitOps repo'
    required: true
  github-app-private-key-base64:
    description: 'The base64 encoded private key of the Github app to use for updating the GitOps repo'
    required: true
  github-app-installation-id:
    description: 'The installation id of the Github app to use for updating the GitOps repo'
    required: true
  # Temp inputs
  force:
    description: 'Deploy when a previous deployment already exists'
    required: false
    default: false
  aks-cluster-name:
    description: 'The name of the AKS cluster to deploy the app to'
    required: true
  aks-cluster-resource-group:
    description: 'The name of the AKS cluster resource group'
    required: true
  azure-service-principal-tenant:
    description: 'The tenant of the service principal to use when pushing the image and deploying the app'
    required: true
  azure-service-principal-subscription:
    description: 'The subscription of the service principal to use when pushing the image and deploying the app'
    required: true
  disable-direct-deployment:
    description: 'Disable the direct deployment, which means we will only do the GitOps update'
    default: false
    required: false
runs:
  using: "composite"
  steps:
    - name: Store image name
      run: echo "IMAGE_NAME=${{ inputs.acr-registry }}.azurecr.io/${{ inputs.app-name }}_${{ inputs.environment }}:${{ github.sha }}" >> $GITHUB_ENV
      shell: bash
    - name: Login to ACR
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.acr-registry }}.azurecr.io
        username: ${{ inputs.azure-service-principal-id }}
        password: ${{ inputs.azure-service-principal-password }}
    - name: Build & push the docker image
      run: |
        cd ${{ inputs.docker-working-directory }}
        docker build -t ${{ env.IMAGE_NAME }} -f ${{ inputs.docker-file-relative }} .
        docker push ${{ env.IMAGE_NAME }}
      shell: bash

    # GitOps deploy
    - name: Update image in deployment
      run: sed -i 's|<IMAGE>|${{ env.IMAGE_NAME }}|' ${{ inputs.deployment-file }}
      shell: bash
    - name: Push Deployment Update
      uses: likvido/action-deployment-pusher@v1.11
      with:
        repo-url: ${{ inputs.gitops-repo-url }}
        environment: ${{ inputs.environment }}
        namespace: ${{ inputs.kubernetes-namespace }}
        app-name: ${{ inputs.app-name }}
        github-app-id: ${{ inputs.github-app-id }}
        github-app-private-key: ${{ inputs.github-app-private-key-base64 }}
        installation-id: ${{ inputs.github-app-installation-id }}
        deployment-file: ${{ inputs.deployment-file }}
        new-image-name: ${{ env.IMAGE_NAME }}

    # Temporarily, we still want to actually deploy here, since we have not set up the GitOps configuration completely yet
    - name: Azure login
      if: ${{ inputs.disable-direct-deployment != 'true' }}
      uses: Azure/login@v1
      with:
        creds: '{"clientId":"${{ inputs.azure-service-principal-id }}","clientSecret":"${{ inputs.azure-service-principal-password }}","subscriptionId":"${{ inputs.azure-service-principal-subscription }}","tenantId":"${{ inputs.azure-service-principal-tenant }}"}'
    - name: Set Kubernetes Context
      if: ${{ inputs.disable-direct-deployment != 'true' }}
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ inputs.aks-cluster-resource-group }}
        cluster-name: ${{ inputs.aks-cluster-name }}
    - name: Deploy to AKS
      if: ${{ inputs.disable-direct-deployment != 'true' }}
      uses: Azure/k8s-deploy@v4
      with:
        force: ${{ inputs.force }}
        namespace: ${{ inputs.kubernetes-namespace }}
        manifests: |
          ${{ inputs.deployment-file }}
